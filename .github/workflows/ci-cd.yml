name: Terraform GKE Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GCP_REGION: "us-central1"
  GKE_CLUSTER_NAME: "github-gke-cluster"
  TF_VERSION: "1.5.0"

jobs:
  setup_runner:
    runs-on: self-hosted
    steps:
      - name: Check installed packages
        run: |
          echo "=== Installed Packages ==="
          dpkg -l | grep -E 'git|curl|unzip|kubectl|jq|google-cloud-sdk'
          echo "=== Python Version ==="
          python3 --version || echo "Python not installed"
          echo "=== gcloud Version ==="
          gcloud --version || echo "gcloud not installed"
          echo "=== kubectl Version ==="
          kubectl version --client || echo "kubectl not installed"

      - name: Install basic dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y \
            git \
            curl \
            unzip \
            jq \
            apt-transport-https \
            ca-certificates \
            gnupg

      - name: Install Google Cloud SDK
        run: |
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          sudo apt-get update -y
          sudo apt-get install -y google-cloud-sdk google-cloud-sdk-gke-gcloud-auth-plugin kubectl
          gcloud --version
          kubectl version --client

      - name: Verify installations
        run: |
          which gcloud
          which kubectl
          gcloud --version
          kubectl version --client

  terraform:
    needs: setup_runner
    runs-on: self-hosted
    environment: production
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          workload_identity_provider: ${{ secrets.GCP_WI_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan -input=false -var="project_id=${{ secrets.GCP_PROJECT }}"

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan

  deploy:
    needs: terraform
    runs-on: self-hosted
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure GCP Credentials
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          workload_identity_provider: ${{ secrets.GCP_WI_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure kubectl
        run: |
          gcloud components update
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --project ${{ secrets.GCP_PROJECT }}

      - name: Deploy Application
        run: |
          kubectl apply -f app/deployment.yaml
          kubectl apply -f app/service.yaml
          kubectl rollout status deployment/hello-deployment --timeout=90s

      - name: Get Service URL
        run: |
          echo "Service IP: $(kubectl get service hello-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
          echo "Access the application at: http://$(kubectl get service hello-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
